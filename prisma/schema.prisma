// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String            @id @default(cuid())
  name               String?
  email              String            @unique
  password           String
  role               String?           @default("user")
  phone              String?           @unique
  avatar_url         String?
  subscription_level Int?              @default(0)
  isActive           Boolean           @default(false)
  activationToken    String?           @unique
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  otpVerifications   OtpVerification[]

  ratings BookRating[]
  reads   BookRead[]
  saved   BookSaved[]
}

model Book {
  id              Int      @id @default(autoincrement())
  title           String   @unique
  author          String
  description     String   @db.Text
  isbn            String?  @unique // International Standard Book Number
  publisher       String? // Penerbit buku
  publicationYear Int? // Tahun terbit
  language        String? // Bahasa buku
  pageCount       Int? // Jumlah halaman
  coverImage      String? // URL gambar sampul buku
  file_url        String? // Tambahkan field ini
  processed       Boolean  @default(false)
  processed_dir   String?
  error_message   String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  pages      BookPage[]
  categories BookCategory[]
  ratings    BookRating[]
  reads      BookRead[]
  saved      BookSaved[]
}

model BookPage {
  id          Int      @id @default(autoincrement())
  book_id     Int
  page_number Int
  image_url   String?
  text        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  book Book @relation(fields: [book_id], references: [id], onDelete: Cascade)
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  books BookCategory[]
}

model BookCategory {
  id          Int      @id @default(autoincrement())
  book_id     Int
  category_id Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  book     Book     @relation(fields: [book_id], references: [id], onDelete: Cascade)
  category Category @relation(fields: [category_id], references: [id], onDelete: Cascade)
}

model BookRating {
  id        Int      @id @default(autoincrement())
  book_id   Int
  user_id   String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  book Book @relation(fields: [book_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model BookRead {
  id        Int      @id @default(autoincrement())
  book_id   Int
  user_id   String
  read_at   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book      Book     @relation(fields: [book_id], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model BookSaved {
  id        Int      @id @default(autoincrement())
  book_id   Int
  user_id   String
  book      Book     @relation(fields: [book_id], references: [id])
  user      User     @relation(fields: [user_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([book_id, user_id])
}

model OtpVerification {
  id          String    @id @default(cuid())
  user_id     String
  phone       String
  otp         String
  expires_at  DateTime
  verified_at DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([phone])
}
